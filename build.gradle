//apply plugin: 'idea'
apply plugin: 'java'

// add support for war, this will also bring in the java plugin
// so the above line was not needed
apply plugin: 'war'
//apply plugin: 'jetty'

// the the description property of Project object
description = "My Gradle Learning Project"

// $name is a project property - the current projects name
// $description was set above
println "Project: $name - $description"

// adding a custom property (versionfile) in the 'ext'ernal space
ext {
   // define a property in the external space that holds the version propertes
   versionfile = file ('version.properties')
}

// the class ProjectVersion - gets used below
class ProjectVersion {
   Integer major
   Integer minor
   Boolean release

   ProjectVersion (Integer major, Integer minor, Boolean release) {
      this.major = major
      this.minor = minor
      this.release = release;
   }

   ProjectVersion (Integer major, Integer minor) {
      this(major, minor, Boolean.FALSE)
   }

   // this method needs to be defined
   @Override
   String toString () {
      "$major.$minor${release ? '':'-SNAPSHOT'}"
   }
}

// define a method readVersion that returns ProjectVersion object
ProjectVersion readVersion () {
   logger.quiet 'Reading the version file.'
   if ( !versionfile.exists ()) {
      throw new GradleException ("Required version file doe not exist. $versionfile.canonicalPath")
   }

   Properties versionProperties = new Properties();
   versionfile.withInputStream { stream ->
      versionProperties.load(stream)
   }

   new ProjectVersion(versionProperties.major.toInteger(),
           versionProperties.minor.toInteger(),
           versionProperties.release.toBoolean())
}

// even though readVersion returns ProjectVersion object,
// gradle will use the objects toString method when assigning project.version
task loadVersion {
   project.version = readVersion()
}

// property of Project object that this script represents
// java jdk version
// sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
   // define the dependencies
    //compile('org.codehaus.groovy:groovy-all:2.4.0')
   providedCompile 'javax.servlet:servlet-api:2.5'
   runtime 'javax.servlet:jstl:1.1.2'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
   testCompile ('junit:junit:4.8.2')
}

// create my own custom task
task first {
   // with its own action
   doLast {
      println "first"
   }
}

// define 2 more tasks in gradle's weird syntax, but the <<
// as a representation of doLast is going away in Gradle 5
task second << { println "second" }
task third << { println "third" }

// the next few blocks show how to specify order in task execution
third.dependsOn ('printVersion')

// task printVersion now shows up in the gradle view to the right
// under 'versioning' grouping and you can double click to execute it
// Also has dependency on first and second
task printVersion (dependsOn: [second, first]){
   // these two properties of Task object will group (this task) printVersion
   // and provide a it a description.
   // both are used when running 'gradle tasks'
   // which displays the tasks this gradle file supports
   group = 'versioning'
   description = 'Prints the project version.'

   // every task has 2 built in actions doFirst and doLast
   doFirst {
      println "this is actually 2nd"
   }

   // gradle provides a default logger based on slf4j library
   doLast {
      logger.quiet "2nd last Version: $version"
   }
}
// we can add more actions to printVersion like this
// so now this is the first, and the doFirst
// defined above is 2nd
printVersion.doFirst { println "This is the new first action" }

// and this is the last, and the doLast
// above is 2nd last
printVersion << { println "Doing the new last action" }

// task that prints the date and time
task time {
   // since there is not group property set, time will fall into 'other' tasks
   doLast {
      println new Date();
   }
}

// use finalizedBy to set up such that running printVersion
// will auto trigger time, after printVersion is done
printVersion.finalizedBy time
printVersion.dependsOn('loadVersion')

// built in version property
version = new ProjectVersion(0, 1)

jar {
    baseName='todo-app'

    manifest {
        attributes 'Implementation-Title': baseName,
                   'Implementation-Version': version,
                   'Main-Class': 'com.gecko.Bootstrap'
    }
}

task wrapper (type: Wrapper) {
   gradleVersion = '2.8'
}

// a custom task that makes a release version of the build
// you can do things like deploy to production server here, etc
task releaseVersion {
   group = 'versioning'
   description = 'Make a release version of the project'

   // define the input and output - these get set up during
   // configuration phase, looks like gradle keeps a copy of the
   // state in the dir $MODDIR/.gradle/$GRADLE_VERSION/
   // and these get compared between builds to see what
   // has changed
   inputs.property 'release',  version.release
   outputs.file versionfile

   doFirst {
      println "first in releaseVersions"
   }

   println "doing something in the middle"

   // actions - get done at task execution phase, only if the inputs
   // and outputs are not up to date
   doLast {
      // use the ant task to do the dirty work
      ant.propertyfile(file: versionfile) {
         entry(key: 'release', type: 'string', operation: '=', value: 'true')
      }
   }
}

// a test task - shows that dependsOn is a method that can be used
// in the task's configuration phase to config a task's dependency
task doNothing {
   group = 'my-own-group'
   description = 'messing around'
   // you can also specify the dependsOn through a method invocations
   dependsOn (['releaseVersion', 'time'])

   doLast {
      println 'funky-com-a-dean'
   }
}

// not using this, but shows how to external properties
task disable {
   doFirst {
      // this property comes from $MODDIR/gradle.properties
      println "$example_hao_property"
   }

   doLast {
      // this is set in $HOME/.gradle/gradle.properties
      println "$my_best_property"
   }
}

// non-conventional directory structure -> tell gradle via configuration
/* sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
    }
} */